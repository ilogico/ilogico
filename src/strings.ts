export type SearchPattern = RegExp | { [Symbol.search](): number };
export const prepend = (prefix: string) => (string: string) => prefix + string;
export const append = (suffix: string) => (string: string) => string + suffix;
export const indexOf = (pattern: string, position?: number) => (string: string) => string.indexOf(pattern, position);
export const lastIndexOf = (pattern: string, position?: number) => (string: string) => string.lastIndexOf(pattern, position);
export const charCodeAt = (index: number) => (string: string) => string.charCodeAt(index);
export const charAt = (index: number) => (string: string) => string.charAt(index);
export const codePointAt = (index: number) => (string: string) => string.codePointAt(index);
export const startsWith = (prefix: string) => (string: string) => string.startsWith(prefix);
export const endsWith = (suffix: string) => (string: string) => string.endsWith(suffix);
export const concat: (array: ReadonlyArray<unknown>) => string = Function.prototype.apply.bind(String.prototype.concat, '');
export const join = (glue?: string) => (array: ReadonlyArray<unknown>) => array.join(glue);
export const includes = (needle: string, position?: number) => (haystack: string) => haystack.includes(needle, position);
export const normalize = (form?: 'NFC' | 'NFD' | 'NFKC' | 'NFKD') => (string: string) => string.normalize(form);
export const padStart = (length: number, padding?: string) => (string: string) => string.padStart(length, padding);
export const padEnd = (length: number, padding?: string) => (string: string) => string.padEnd(length, padding);
export const search = (pattern: SearchPattern) => (string: string) => string.search(pattern);
export const slice = (start?: number, end?: number) => (string: string) => string.slice(start, end);
export const substr = (start: number, length?: number) => (string: string) => string.substr(start, length);
export const toLowerCase = (string: string) => string.toLowerCase();
export const toUpperCase = (string: string) => string.toUpperCase();
export const toLocaleLowerCase = (string: string) => string.toLocaleLowerCase();
export const toLocaleUpperCase = (string: string) => string.toLocaleUpperCase();
export const trim = (string: string) => string.trim();
export const trimStart = (string: string) => (string as any).trimStart();
export const trimEnd = (string: string) => (string as any).trimEnd();
